<?php

namespace Proxies\__CG__\BO\OccasionBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Customer extends \BO\OccasionBundle\Entity\Customer implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'id', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'lnamecust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'fnamecust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'telcust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'governate'];
        }

        return ['__isInitialized__', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'id', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'lnamecust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'fnamecust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'telcust', '' . "\0" . 'BO\\OccasionBundle\\Entity\\Customer' . "\0" . 'governate'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Customer $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLnamecust($lnamecust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLnamecust', [$lnamecust]);

        return parent::setLnamecust($lnamecust);
    }

    /**
     * {@inheritDoc}
     */
    public function getLnamecust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLnamecust', []);

        return parent::getLnamecust();
    }

    /**
     * {@inheritDoc}
     */
    public function setFnamecust($fnamecust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFnamecust', [$fnamecust]);

        return parent::setFnamecust($fnamecust);
    }

    /**
     * {@inheritDoc}
     */
    public function getFnamecust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFnamecust', []);

        return parent::getFnamecust();
    }

    /**
     * {@inheritDoc}
     */
    public function setCivilcust($civilcust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCivilcust', [$civilcust]);

        return parent::setCivilcust($civilcust);
    }

    /**
     * {@inheritDoc}
     */
    public function getCivilcust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCivilcust', []);

        return parent::getCivilcust();
    }

    /**
     * {@inheritDoc}
     */
    public function setFunccust($funccust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFunccust', [$funccust]);

        return parent::setFunccust($funccust);
    }

    /**
     * {@inheritDoc}
     */
    public function getFunccust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFunccust', []);

        return parent::getFunccust();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevelcust($levelcust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevelcust', [$levelcust]);

        return parent::setLevelcust($levelcust);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevelcust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevelcust', []);

        return parent::getLevelcust();
    }

    /**
     * {@inheritDoc}
     */
    public function setCitycust($citycust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCitycust', [$citycust]);

        return parent::setCitycust($citycust);
    }

    /**
     * {@inheritDoc}
     */
    public function getCitycust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCitycust', []);

        return parent::getCitycust();
    }

    /**
     * {@inheritDoc}
     */
    public function setTelcust($telcust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTelcust', [$telcust]);

        return parent::setTelcust($telcust);
    }

    /**
     * {@inheritDoc}
     */
    public function getTelcust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTelcust', []);

        return parent::getTelcust();
    }

    /**
     * {@inheritDoc}
     */
    public function setSexcust($sexcust)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSexcust', [$sexcust]);

        return parent::setSexcust($sexcust);
    }

    /**
     * {@inheritDoc}
     */
    public function getSexcust()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSexcust', []);

        return parent::getSexcust();
    }

    /**
     * {@inheritDoc}
     */
    public function setGovernate(\BO\OccasionBundle\Entity\Governate $governate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGovernate', [$governate]);

        return parent::setGovernate($governate);
    }

    /**
     * {@inheritDoc}
     */
    public function getGovernate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGovernate', []);

        return parent::getGovernate();
    }

}
